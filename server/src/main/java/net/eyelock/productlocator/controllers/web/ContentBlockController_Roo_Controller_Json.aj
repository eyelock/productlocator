// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.productlocator.controllers.web;

import java.util.List;
import net.eyelock.productlocator.controllers.web.ContentBlockController;
import net.eyelock.productlocator.model.Article;
import net.eyelock.productlocator.model.ContentBlock;
import net.eyelock.productlocator.model.ContentBlockType;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect ContentBlockController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ContentBlockController.showJson(@PathVariable("id") Long id) {
        ContentBlock contentblock = ContentBlock.findContentBlock(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (contentblock == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(contentblock.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ContentBlockController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<ContentBlock> result = ContentBlock.findAllContentBlocks();
        return new ResponseEntity<String>(ContentBlock.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> ContentBlockController.createFromJson(@RequestBody String json) {
        ContentBlock contentBlock = ContentBlock.fromJsonToContentBlock(json);
        contentBlock.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> ContentBlockController.createFromJsonArray(@RequestBody String json) {
        for (ContentBlock contentBlock: ContentBlock.fromJsonArrayToContentBlocks(json)) {
            contentBlock.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> ContentBlockController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        ContentBlock contentBlock = ContentBlock.fromJsonToContentBlock(json);
        if (contentBlock.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> ContentBlockController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (ContentBlock contentBlock: ContentBlock.fromJsonArrayToContentBlocks(json)) {
            if (contentBlock.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> ContentBlockController.deleteFromJson(@PathVariable("id") Long id) {
        ContentBlock contentBlock = ContentBlock.findContentBlock(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (contentBlock == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        contentBlock.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByArticle", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ContentBlockController.jsonFindContentBlocksByArticle(@RequestParam("article") Article article) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(ContentBlock.toJsonArray(ContentBlock.findContentBlocksByArticle(article).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByTypeEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ContentBlockController.jsonFindContentBlocksByTypeEquals(@RequestParam("type") ContentBlockType type) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(ContentBlock.toJsonArray(ContentBlock.findContentBlocksByTypeEquals(type).getResultList()), headers, HttpStatus.OK);
    }
    
}
