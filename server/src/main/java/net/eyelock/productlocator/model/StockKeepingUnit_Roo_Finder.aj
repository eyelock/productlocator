// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.productlocator.model;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import net.eyelock.productlocator.model.Product;
import net.eyelock.productlocator.model.StockKeepingUnit;

privileged aspect StockKeepingUnit_Roo_Finder {
    
    public static TypedQuery<StockKeepingUnit> StockKeepingUnit.findStockKeepingUnitsByActiveNot(Boolean active) {
        if (active == null) throw new IllegalArgumentException("The active argument is required");
        EntityManager em = StockKeepingUnit.entityManager();
        TypedQuery<StockKeepingUnit> q = em.createQuery("SELECT o FROM StockKeepingUnit AS o WHERE o.active IS NOT :active", StockKeepingUnit.class);
        q.setParameter("active", active);
        return q;
    }
    
    public static TypedQuery<StockKeepingUnit> StockKeepingUnit.findStockKeepingUnitsByNameEquals(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        EntityManager em = StockKeepingUnit.entityManager();
        TypedQuery<StockKeepingUnit> q = em.createQuery("SELECT o FROM StockKeepingUnit AS o WHERE o.name = :name", StockKeepingUnit.class);
        q.setParameter("name", name);
        return q;
    }
    
    public static TypedQuery<StockKeepingUnit> StockKeepingUnit.findStockKeepingUnitsByNameLike(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        name = name.replace('*', '%');
        if (name.charAt(0) != '%') {
            name = "%" + name;
        }
        if (name.charAt(name.length() - 1) != '%') {
            name = name + "%";
        }
        EntityManager em = StockKeepingUnit.entityManager();
        TypedQuery<StockKeepingUnit> q = em.createQuery("SELECT o FROM StockKeepingUnit AS o WHERE LOWER(o.name) LIKE LOWER(:name)", StockKeepingUnit.class);
        q.setParameter("name", name);
        return q;
    }
    
    public static TypedQuery<StockKeepingUnit> StockKeepingUnit.findStockKeepingUnitsByPriceBetween(Float minPrice, Float maxPrice) {
        if (minPrice == null) throw new IllegalArgumentException("The minPrice argument is required");
        if (maxPrice == null) throw new IllegalArgumentException("The maxPrice argument is required");
        EntityManager em = StockKeepingUnit.entityManager();
        TypedQuery<StockKeepingUnit> q = em.createQuery("SELECT o FROM StockKeepingUnit AS o WHERE o.price BETWEEN :minPrice AND :maxPrice", StockKeepingUnit.class);
        q.setParameter("minPrice", minPrice);
        q.setParameter("maxPrice", maxPrice);
        return q;
    }
    
    public static TypedQuery<StockKeepingUnit> StockKeepingUnit.findStockKeepingUnitsByProduct(Product product) {
        if (product == null) throw new IllegalArgumentException("The product argument is required");
        EntityManager em = StockKeepingUnit.entityManager();
        TypedQuery<StockKeepingUnit> q = em.createQuery("SELECT o FROM StockKeepingUnit AS o WHERE o.product = :product", StockKeepingUnit.class);
        q.setParameter("product", product);
        return q;
    }
    
}
