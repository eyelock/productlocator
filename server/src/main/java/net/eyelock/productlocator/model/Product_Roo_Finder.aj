// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.productlocator.model;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import net.eyelock.productlocator.model.Product;

privileged aspect Product_Roo_Finder {
    
    public static TypedQuery<Product> Product.findProductsByActiveNot(Boolean active) {
        if (active == null) throw new IllegalArgumentException("The active argument is required");
        EntityManager em = Product.entityManager();
        TypedQuery<Product> q = em.createQuery("SELECT o FROM Product AS o WHERE o.active IS NOT :active", Product.class);
        q.setParameter("active", active);
        return q;
    }
    
    public static TypedQuery<Product> Product.findProductsByAvailableEverywhereNot(Boolean availableEverywhere) {
        if (availableEverywhere == null) throw new IllegalArgumentException("The availableEverywhere argument is required");
        EntityManager em = Product.entityManager();
        TypedQuery<Product> q = em.createQuery("SELECT o FROM Product AS o WHERE o.availableEverywhere IS NOT :availableEverywhere", Product.class);
        q.setParameter("availableEverywhere", availableEverywhere);
        return q;
    }
    
    public static TypedQuery<Product> Product.findProductsByDescriptionLike(String description) {
        if (description == null || description.length() == 0) throw new IllegalArgumentException("The description argument is required");
        description = description.replace('*', '%');
        if (description.charAt(0) != '%') {
            description = "%" + description;
        }
        if (description.charAt(description.length() - 1) != '%') {
            description = description + "%";
        }
        EntityManager em = Product.entityManager();
        TypedQuery<Product> q = em.createQuery("SELECT o FROM Product AS o WHERE LOWER(o.description) LIKE LOWER(:description)", Product.class);
        q.setParameter("description", description);
        return q;
    }
    
    public static TypedQuery<Product> Product.findProductsByNameEquals(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        EntityManager em = Product.entityManager();
        TypedQuery<Product> q = em.createQuery("SELECT o FROM Product AS o WHERE o.name = :name", Product.class);
        q.setParameter("name", name);
        return q;
    }
    
    public static TypedQuery<Product> Product.findProductsByNameLike(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        name = name.replace('*', '%');
        if (name.charAt(0) != '%') {
            name = "%" + name;
        }
        if (name.charAt(name.length() - 1) != '%') {
            name = name + "%";
        }
        EntityManager em = Product.entityManager();
        TypedQuery<Product> q = em.createQuery("SELECT o FROM Product AS o WHERE LOWER(o.name) LIKE LOWER(:name)", Product.class);
        q.setParameter("name", name);
        return q;
    }
    
}
