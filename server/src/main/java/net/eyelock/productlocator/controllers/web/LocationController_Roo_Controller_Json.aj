// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.productlocator.controllers.web;

import java.util.List;
import net.eyelock.productlocator.controllers.web.LocationController;
import net.eyelock.productlocator.model.Country;
import net.eyelock.productlocator.model.Location;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect LocationController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LocationController.showJson(@PathVariable("id") Long id) {
        Location location = Location.findLocation(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (location == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(location.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LocationController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Location> result = Location.findAllLocations();
        return new ResponseEntity<String>(Location.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> LocationController.createFromJson(@RequestBody String json) {
        Location location = Location.fromJsonToLocation(json);
        location.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> LocationController.createFromJsonArray(@RequestBody String json) {
        for (Location location: Location.fromJsonArrayToLocations(json)) {
            location.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> LocationController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Location location = Location.fromJsonToLocation(json);
        if (location.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> LocationController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (Location location: Location.fromJsonArrayToLocations(json)) {
            if (location.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> LocationController.deleteFromJson(@PathVariable("id") Long id) {
        Location location = Location.findLocation(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (location == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        location.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByActiveNot", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LocationController.jsonFindLocationsByActiveNot(@RequestParam(value = "active", required = false) Boolean active) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Location.toJsonArray(Location.findLocationsByActiveNot(active == null ? Boolean.FALSE : active).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCityEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LocationController.jsonFindLocationsByCityEquals(@RequestParam("city") String city) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Location.toJsonArray(Location.findLocationsByCityEquals(city).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCityLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LocationController.jsonFindLocationsByCityLike(@RequestParam("city") String city) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Location.toJsonArray(Location.findLocationsByCityLike(city).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCountry", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LocationController.jsonFindLocationsByCountry(@RequestParam("country") Country country) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Location.toJsonArray(Location.findLocationsByCountry(country).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByNameEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LocationController.jsonFindLocationsByNameEquals(@RequestParam("name") String name) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Location.toJsonArray(Location.findLocationsByNameEquals(name).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByNameLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LocationController.jsonFindLocationsByNameLike(@RequestParam("name") String name) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Location.toJsonArray(Location.findLocationsByNameLike(name).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByPostcodeLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LocationController.jsonFindLocationsByPostcodeLike(@RequestParam("postcode") String postcode) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Location.toJsonArray(Location.findLocationsByPostcodeLike(postcode).getResultList()), headers, HttpStatus.OK);
    }
    
}
