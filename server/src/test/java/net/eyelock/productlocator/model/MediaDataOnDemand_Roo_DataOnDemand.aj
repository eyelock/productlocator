// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.productlocator.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import net.eyelock.productlocator.model.Media;
import net.eyelock.productlocator.model.MediaDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect MediaDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MediaDataOnDemand: @Component;
    
    private Random MediaDataOnDemand.rnd = new SecureRandom();
    
    private List<Media> MediaDataOnDemand.data;
    
    public Media MediaDataOnDemand.getNewTransientMedia(int index) {
        Media obj = new Media();
        setContent(obj, index);
        setDescription(obj, index);
        setFileName(obj, index);
        setMimeType(obj, index);
        setName(obj, index);
        setSize(obj, index);
        setUrl(obj, index);
        return obj;
    }
    
    public void MediaDataOnDemand.setContent(Media obj, int index) {
        byte[] content = String.valueOf(index).getBytes();
        obj.setContent(content);
    }
    
    public void MediaDataOnDemand.setDescription(Media obj, int index) {
        String description = "description_" + index;
        if (description.length() > 4000) {
            description = description.substring(0, 4000);
        }
        obj.setDescription(description);
    }
    
    public void MediaDataOnDemand.setFileName(Media obj, int index) {
        String fileName = "fileName_" + index;
        if (fileName.length() > 255) {
            fileName = fileName.substring(0, 255);
        }
        obj.setFileName(fileName);
    }
    
    public void MediaDataOnDemand.setMimeType(Media obj, int index) {
        String mimeType = "mimeType_" + index;
        obj.setMimeType(mimeType);
    }
    
    public void MediaDataOnDemand.setName(Media obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void MediaDataOnDemand.setSize(Media obj, int index) {
        Long size = new Integer(index).longValue();
        obj.setSize(size);
    }
    
    public void MediaDataOnDemand.setUrl(Media obj, int index) {
        String url = "url_" + index;
        if (url.length() > 255) {
            url = new Random().nextInt(10) + url.substring(1, 255);
        }
        obj.setUrl(url);
    }
    
    public Media MediaDataOnDemand.getSpecificMedia(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Media obj = data.get(index);
        Long id = obj.getId();
        return Media.findMedia(id);
    }
    
    public Media MediaDataOnDemand.getRandomMedia() {
        init();
        Media obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Media.findMedia(id);
    }
    
    public boolean MediaDataOnDemand.modifyMedia(Media obj) {
        return false;
    }
    
    public void MediaDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Media.findMediaEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Media' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Media>();
        for (int i = 0; i < 10; i++) {
            Media obj = getNewTransientMedia(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
