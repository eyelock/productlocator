// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.productlocator.model;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import net.eyelock.productlocator.model.Country;
import net.eyelock.productlocator.model.Location;

privileged aspect Location_Roo_Finder {
    
    public static TypedQuery<Location> Location.findLocationsByActiveNot(Boolean active) {
        if (active == null) throw new IllegalArgumentException("The active argument is required");
        EntityManager em = Location.entityManager();
        TypedQuery<Location> q = em.createQuery("SELECT o FROM Location AS o WHERE o.active IS NOT :active", Location.class);
        q.setParameter("active", active);
        return q;
    }
    
    public static TypedQuery<Location> Location.findLocationsByCityEquals(String city) {
        if (city == null || city.length() == 0) throw new IllegalArgumentException("The city argument is required");
        EntityManager em = Location.entityManager();
        TypedQuery<Location> q = em.createQuery("SELECT o FROM Location AS o WHERE o.city = :city", Location.class);
        q.setParameter("city", city);
        return q;
    }
    
    public static TypedQuery<Location> Location.findLocationsByCityLike(String city) {
        if (city == null || city.length() == 0) throw new IllegalArgumentException("The city argument is required");
        city = city.replace('*', '%');
        if (city.charAt(0) != '%') {
            city = "%" + city;
        }
        if (city.charAt(city.length() - 1) != '%') {
            city = city + "%";
        }
        EntityManager em = Location.entityManager();
        TypedQuery<Location> q = em.createQuery("SELECT o FROM Location AS o WHERE LOWER(o.city) LIKE LOWER(:city)", Location.class);
        q.setParameter("city", city);
        return q;
    }
    
    public static TypedQuery<Location> Location.findLocationsByCountry(Country country) {
        if (country == null) throw new IllegalArgumentException("The country argument is required");
        EntityManager em = Location.entityManager();
        TypedQuery<Location> q = em.createQuery("SELECT o FROM Location AS o WHERE o.country = :country", Location.class);
        q.setParameter("country", country);
        return q;
    }
    
    public static TypedQuery<Location> Location.findLocationsByNameEquals(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        EntityManager em = Location.entityManager();
        TypedQuery<Location> q = em.createQuery("SELECT o FROM Location AS o WHERE o.name = :name", Location.class);
        q.setParameter("name", name);
        return q;
    }
    
    public static TypedQuery<Location> Location.findLocationsByNameLike(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        name = name.replace('*', '%');
        if (name.charAt(0) != '%') {
            name = "%" + name;
        }
        if (name.charAt(name.length() - 1) != '%') {
            name = name + "%";
        }
        EntityManager em = Location.entityManager();
        TypedQuery<Location> q = em.createQuery("SELECT o FROM Location AS o WHERE LOWER(o.name) LIKE LOWER(:name)", Location.class);
        q.setParameter("name", name);
        return q;
    }
    
    public static TypedQuery<Location> Location.findLocationsByPostcodeLike(String postcode) {
        if (postcode == null || postcode.length() == 0) throw new IllegalArgumentException("The postcode argument is required");
        postcode = postcode.replace('*', '%');
        if (postcode.charAt(0) != '%') {
            postcode = "%" + postcode;
        }
        if (postcode.charAt(postcode.length() - 1) != '%') {
            postcode = postcode + "%";
        }
        EntityManager em = Location.entityManager();
        TypedQuery<Location> q = em.createQuery("SELECT o FROM Location AS o WHERE LOWER(o.postcode) LIKE LOWER(:postcode)", Location.class);
        q.setParameter("postcode", postcode);
        return q;
    }
    
}
