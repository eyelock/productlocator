// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.productlocator.controllers.web;

import java.util.List;
import net.eyelock.productlocator.controllers.web.StockKeepingUnitController;
import net.eyelock.productlocator.model.Product;
import net.eyelock.productlocator.model.StockKeepingUnit;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect StockKeepingUnitController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> StockKeepingUnitController.showJson(@PathVariable("id") Long id) {
        StockKeepingUnit stockkeepingunit = StockKeepingUnit.findStockKeepingUnit(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (stockkeepingunit == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(stockkeepingunit.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> StockKeepingUnitController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<StockKeepingUnit> result = StockKeepingUnit.findAllStockKeepingUnits();
        return new ResponseEntity<String>(StockKeepingUnit.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> StockKeepingUnitController.createFromJson(@RequestBody String json) {
        StockKeepingUnit stockKeepingUnit = StockKeepingUnit.fromJsonToStockKeepingUnit(json);
        stockKeepingUnit.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> StockKeepingUnitController.createFromJsonArray(@RequestBody String json) {
        for (StockKeepingUnit stockKeepingUnit: StockKeepingUnit.fromJsonArrayToStockKeepingUnits(json)) {
            stockKeepingUnit.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> StockKeepingUnitController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        StockKeepingUnit stockKeepingUnit = StockKeepingUnit.fromJsonToStockKeepingUnit(json);
        if (stockKeepingUnit.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> StockKeepingUnitController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (StockKeepingUnit stockKeepingUnit: StockKeepingUnit.fromJsonArrayToStockKeepingUnits(json)) {
            if (stockKeepingUnit.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> StockKeepingUnitController.deleteFromJson(@PathVariable("id") Long id) {
        StockKeepingUnit stockKeepingUnit = StockKeepingUnit.findStockKeepingUnit(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (stockKeepingUnit == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        stockKeepingUnit.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByActiveNot", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> StockKeepingUnitController.jsonFindStockKeepingUnitsByActiveNot(@RequestParam(value = "active", required = false) Boolean active) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(StockKeepingUnit.toJsonArray(StockKeepingUnit.findStockKeepingUnitsByActiveNot(active == null ? Boolean.FALSE : active).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByNameEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> StockKeepingUnitController.jsonFindStockKeepingUnitsByNameEquals(@RequestParam("name") String name) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(StockKeepingUnit.toJsonArray(StockKeepingUnit.findStockKeepingUnitsByNameEquals(name).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByNameLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> StockKeepingUnitController.jsonFindStockKeepingUnitsByNameLike(@RequestParam("name") String name) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(StockKeepingUnit.toJsonArray(StockKeepingUnit.findStockKeepingUnitsByNameLike(name).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByPriceBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> StockKeepingUnitController.jsonFindStockKeepingUnitsByPriceBetween(@RequestParam("minPrice") Float minPrice, @RequestParam("maxPrice") Float maxPrice) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(StockKeepingUnit.toJsonArray(StockKeepingUnit.findStockKeepingUnitsByPriceBetween(minPrice, maxPrice).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByProduct", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> StockKeepingUnitController.jsonFindStockKeepingUnitsByProduct(@RequestParam("product") Product product) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(StockKeepingUnit.toJsonArray(StockKeepingUnit.findStockKeepingUnitsByProduct(product).getResultList()), headers, HttpStatus.OK);
    }
    
}
