// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.productlocator.controllers.web;

import java.util.List;
import net.eyelock.productlocator.controllers.web.MediaController;
import net.eyelock.productlocator.model.Media;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect MediaController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MediaController.showJson(@PathVariable("id") Long id) {
        Media media = Media.findMedia(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (media == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(media.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MediaController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Media> result = Media.findAllMedia();
        return new ResponseEntity<String>(Media.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> MediaController.createFromJson(@RequestBody String json) {
        Media media = Media.fromJsonToMedia(json);
        media.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> MediaController.createFromJsonArray(@RequestBody String json) {
        for (Media media: Media.fromJsonArrayToMedia(json)) {
            media.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> MediaController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Media media = Media.fromJsonToMedia(json);
        if (media.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> MediaController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (Media media: Media.fromJsonArrayToMedia(json)) {
            if (media.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> MediaController.deleteFromJson(@PathVariable("id") Long id) {
        Media media = Media.findMedia(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (media == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        media.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByFileNameEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MediaController.jsonFindMediaByFileNameEquals(@RequestParam("fileName") String fileName) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Media.toJsonArray(Media.findMediaByFileNameEquals(fileName).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByFileNameLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MediaController.jsonFindMediaByFileNameLike(@RequestParam("fileName") String fileName) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Media.toJsonArray(Media.findMediaByFileNameLike(fileName).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByMimeTypeEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MediaController.jsonFindMediaByMimeTypeEquals(@RequestParam("mimeType") String mimeType) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Media.toJsonArray(Media.findMediaByMimeTypeEquals(mimeType).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByNameEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MediaController.jsonFindMediaByNameEquals(@RequestParam("name") String name) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Media.toJsonArray(Media.findMediaByNameEquals(name).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByNameLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MediaController.jsonFindMediaByNameLike(@RequestParam("name") String name) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Media.toJsonArray(Media.findMediaByNameLike(name).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySizeBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MediaController.jsonFindMediaBySizeBetween(@RequestParam("minSize") Long minSize, @RequestParam("maxSize") Long maxSize) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Media.toJsonArray(Media.findMediaBySizeBetween(minSize, maxSize).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByUrlEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MediaController.jsonFindMediaByUrlEquals(@RequestParam("url") String url) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Media.toJsonArray(Media.findMediaByUrlEquals(url).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByUrlLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MediaController.jsonFindMediaByUrlLike(@RequestParam("url") String url) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Media.toJsonArray(Media.findMediaByUrlLike(url).getResultList()), headers, HttpStatus.OK);
    }
    
}
