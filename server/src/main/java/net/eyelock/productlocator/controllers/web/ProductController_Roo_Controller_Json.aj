// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.productlocator.controllers.web;

import java.util.List;
import net.eyelock.productlocator.controllers.web.ProductController;
import net.eyelock.productlocator.model.Product;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect ProductController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ProductController.showJson(@PathVariable("id") Long id) {
        Product product = Product.findProduct(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (product == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(product.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ProductController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Product> result = Product.findAllProducts();
        return new ResponseEntity<String>(Product.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> ProductController.createFromJson(@RequestBody String json) {
        Product product = Product.fromJsonToProduct(json);
        product.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> ProductController.createFromJsonArray(@RequestBody String json) {
        for (Product product: Product.fromJsonArrayToProducts(json)) {
            product.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> ProductController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Product product = Product.fromJsonToProduct(json);
        if (product.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> ProductController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (Product product: Product.fromJsonArrayToProducts(json)) {
            if (product.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> ProductController.deleteFromJson(@PathVariable("id") Long id) {
        Product product = Product.findProduct(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (product == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        product.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByActiveNot", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ProductController.jsonFindProductsByActiveNot(@RequestParam(value = "active", required = false) Boolean active) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Product.toJsonArray(Product.findProductsByActiveNot(active == null ? Boolean.FALSE : active).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByAvailableEverywhereNot", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ProductController.jsonFindProductsByAvailableEverywhereNot(@RequestParam(value = "availableEverywhere", required = false) Boolean availableEverywhere) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Product.toJsonArray(Product.findProductsByAvailableEverywhereNot(availableEverywhere == null ? Boolean.FALSE : availableEverywhere).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDescriptionLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ProductController.jsonFindProductsByDescriptionLike(@RequestParam("description") String description) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Product.toJsonArray(Product.findProductsByDescriptionLike(description).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByNameEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ProductController.jsonFindProductsByNameEquals(@RequestParam("name") String name) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Product.toJsonArray(Product.findProductsByNameEquals(name).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByNameLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ProductController.jsonFindProductsByNameLike(@RequestParam("name") String name) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Product.toJsonArray(Product.findProductsByNameLike(name).getResultList()), headers, HttpStatus.OK);
    }
    
}
