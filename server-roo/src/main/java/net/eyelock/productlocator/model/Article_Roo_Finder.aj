// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.productlocator.model;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import net.eyelock.productlocator.model.Article;

privileged aspect Article_Roo_Finder {
    
    public static TypedQuery<Article> Article.findArticlesByCodeEquals(String code) {
        if (code == null || code.length() == 0) throw new IllegalArgumentException("The code argument is required");
        EntityManager em = Article.entityManager();
        TypedQuery<Article> q = em.createQuery("SELECT o FROM Article AS o WHERE o.code = :code", Article.class);
        q.setParameter("code", code);
        return q;
    }
    
    public static TypedQuery<Article> Article.findArticlesByCodeLike(String code) {
        if (code == null || code.length() == 0) throw new IllegalArgumentException("The code argument is required");
        code = code.replace('*', '%');
        if (code.charAt(0) != '%') {
            code = "%" + code;
        }
        if (code.charAt(code.length() - 1) != '%') {
            code = code + "%";
        }
        EntityManager em = Article.entityManager();
        TypedQuery<Article> q = em.createQuery("SELECT o FROM Article AS o WHERE LOWER(o.code) LIKE LOWER(:code)", Article.class);
        q.setParameter("code", code);
        return q;
    }
    
    public static TypedQuery<Article> Article.findArticlesByListableNot(Boolean listable) {
        if (listable == null) throw new IllegalArgumentException("The listable argument is required");
        EntityManager em = Article.entityManager();
        TypedQuery<Article> q = em.createQuery("SELECT o FROM Article AS o WHERE o.listable IS NOT :listable", Article.class);
        q.setParameter("listable", listable);
        return q;
    }
    
    public static TypedQuery<Article> Article.findArticlesByNameEquals(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        EntityManager em = Article.entityManager();
        TypedQuery<Article> q = em.createQuery("SELECT o FROM Article AS o WHERE o.name = :name", Article.class);
        q.setParameter("name", name);
        return q;
    }
    
}
