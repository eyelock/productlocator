// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.productlocator.controllers.web;

import net.eyelock.productlocator.controllers.web.ProductController;
import net.eyelock.productlocator.model.Product;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect ProductController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByActiveNot", "form" }, method = RequestMethod.GET)
    public String ProductController.findProductsByActiveNotForm(Model uiModel) {
        return "products/findProductsByActiveNot";
    }
    
    @RequestMapping(params = "find=ByActiveNot", method = RequestMethod.GET)
    public String ProductController.findProductsByActiveNot(@RequestParam(value = "active", required = false) Boolean active, Model uiModel) {
        uiModel.addAttribute("products", Product.findProductsByActiveNot(active == null ? Boolean.FALSE : active).getResultList());
        return "products/list";
    }
    
    @RequestMapping(params = { "find=ByAvailableEverywhereNot", "form" }, method = RequestMethod.GET)
    public String ProductController.findProductsByAvailableEverywhereNotForm(Model uiModel) {
        return "products/findProductsByAvailableEverywhereNot";
    }
    
    @RequestMapping(params = "find=ByAvailableEverywhereNot", method = RequestMethod.GET)
    public String ProductController.findProductsByAvailableEverywhereNot(@RequestParam(value = "availableEverywhere", required = false) Boolean availableEverywhere, Model uiModel) {
        uiModel.addAttribute("products", Product.findProductsByAvailableEverywhereNot(availableEverywhere == null ? Boolean.FALSE : availableEverywhere).getResultList());
        return "products/list";
    }
    
    @RequestMapping(params = { "find=ByDescriptionLike", "form" }, method = RequestMethod.GET)
    public String ProductController.findProductsByDescriptionLikeForm(Model uiModel) {
        return "products/findProductsByDescriptionLike";
    }
    
    @RequestMapping(params = "find=ByDescriptionLike", method = RequestMethod.GET)
    public String ProductController.findProductsByDescriptionLike(@RequestParam("description") String description, Model uiModel) {
        uiModel.addAttribute("products", Product.findProductsByDescriptionLike(description).getResultList());
        return "products/list";
    }
    
    @RequestMapping(params = { "find=ByNameEquals", "form" }, method = RequestMethod.GET)
    public String ProductController.findProductsByNameEqualsForm(Model uiModel) {
        return "products/findProductsByNameEquals";
    }
    
    @RequestMapping(params = "find=ByNameEquals", method = RequestMethod.GET)
    public String ProductController.findProductsByNameEquals(@RequestParam("name") String name, Model uiModel) {
        uiModel.addAttribute("products", Product.findProductsByNameEquals(name).getResultList());
        return "products/list";
    }
    
    @RequestMapping(params = { "find=ByNameLike", "form" }, method = RequestMethod.GET)
    public String ProductController.findProductsByNameLikeForm(Model uiModel) {
        return "products/findProductsByNameLike";
    }
    
    @RequestMapping(params = "find=ByNameLike", method = RequestMethod.GET)
    public String ProductController.findProductsByNameLike(@RequestParam("name") String name, Model uiModel) {
        uiModel.addAttribute("products", Product.findProductsByNameLike(name).getResultList());
        return "products/list";
    }
    
}
