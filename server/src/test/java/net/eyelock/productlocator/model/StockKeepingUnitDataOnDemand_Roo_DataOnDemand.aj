// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.productlocator.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import net.eyelock.productlocator.model.Media;
import net.eyelock.productlocator.model.MediaDataOnDemand;
import net.eyelock.productlocator.model.Product;
import net.eyelock.productlocator.model.ProductDataOnDemand;
import net.eyelock.productlocator.model.StockKeepingUnit;
import net.eyelock.productlocator.model.StockKeepingUnitDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect StockKeepingUnitDataOnDemand_Roo_DataOnDemand {
    
    declare @type: StockKeepingUnitDataOnDemand: @Component;
    
    private Random StockKeepingUnitDataOnDemand.rnd = new SecureRandom();
    
    private List<StockKeepingUnit> StockKeepingUnitDataOnDemand.data;
    
    @Autowired
    private MediaDataOnDemand StockKeepingUnitDataOnDemand.mediaDataOnDemand;
    
    @Autowired
    private ProductDataOnDemand StockKeepingUnitDataOnDemand.productDataOnDemand;
    
    public StockKeepingUnit StockKeepingUnitDataOnDemand.getNewTransientStockKeepingUnit(int index) {
        StockKeepingUnit obj = new StockKeepingUnit();
        setActive(obj, index);
        setDescription(obj, index);
        setIcon(obj, index);
        setImage(obj, index);
        setName(obj, index);
        setPrice(obj, index);
        setProduct(obj, index);
        setTeaser(obj, index);
        return obj;
    }
    
    public void StockKeepingUnitDataOnDemand.setActive(StockKeepingUnit obj, int index) {
        Boolean active = Boolean.TRUE;
        obj.setActive(active);
    }
    
    public void StockKeepingUnitDataOnDemand.setDescription(StockKeepingUnit obj, int index) {
        String description = "description_" + index;
        if (description.length() > 1000) {
            description = description.substring(0, 1000);
        }
        obj.setDescription(description);
    }
    
    public void StockKeepingUnitDataOnDemand.setIcon(StockKeepingUnit obj, int index) {
        Media icon = mediaDataOnDemand.getRandomMedia();
        obj.setIcon(icon);
    }
    
    public void StockKeepingUnitDataOnDemand.setImage(StockKeepingUnit obj, int index) {
        Media image = mediaDataOnDemand.getRandomMedia();
        obj.setImage(image);
    }
    
    public void StockKeepingUnitDataOnDemand.setName(StockKeepingUnit obj, int index) {
        String name = "name_" + index;
        if (name.length() > 100) {
            name = name.substring(0, 100);
        }
        obj.setName(name);
    }
    
    public void StockKeepingUnitDataOnDemand.setPrice(StockKeepingUnit obj, int index) {
        Float price = new Integer(index).floatValue();
        obj.setPrice(price);
    }
    
    public void StockKeepingUnitDataOnDemand.setProduct(StockKeepingUnit obj, int index) {
        Product product = productDataOnDemand.getRandomProduct();
        obj.setProduct(product);
    }
    
    public void StockKeepingUnitDataOnDemand.setTeaser(StockKeepingUnit obj, int index) {
        String teaser = "teaser_" + index;
        if (teaser.length() > 255) {
            teaser = teaser.substring(0, 255);
        }
        obj.setTeaser(teaser);
    }
    
    public StockKeepingUnit StockKeepingUnitDataOnDemand.getSpecificStockKeepingUnit(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        StockKeepingUnit obj = data.get(index);
        Long id = obj.getId();
        return StockKeepingUnit.findStockKeepingUnit(id);
    }
    
    public StockKeepingUnit StockKeepingUnitDataOnDemand.getRandomStockKeepingUnit() {
        init();
        StockKeepingUnit obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return StockKeepingUnit.findStockKeepingUnit(id);
    }
    
    public boolean StockKeepingUnitDataOnDemand.modifyStockKeepingUnit(StockKeepingUnit obj) {
        return false;
    }
    
    public void StockKeepingUnitDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = StockKeepingUnit.findStockKeepingUnitEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'StockKeepingUnit' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<StockKeepingUnit>();
        for (int i = 0; i < 10; i++) {
            StockKeepingUnit obj = getNewTransientStockKeepingUnit(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
