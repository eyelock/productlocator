// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.productlocator.model;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import net.eyelock.productlocator.model.Media;

privileged aspect Media_Roo_Finder {
    
    public static TypedQuery<Media> Media.findMediaByFileNameEquals(String fileName) {
        if (fileName == null || fileName.length() == 0) throw new IllegalArgumentException("The fileName argument is required");
        EntityManager em = Media.entityManager();
        TypedQuery<Media> q = em.createQuery("SELECT o FROM Media AS o WHERE o.fileName = :fileName", Media.class);
        q.setParameter("fileName", fileName);
        return q;
    }
    
    public static TypedQuery<Media> Media.findMediaByFileNameLike(String fileName) {
        if (fileName == null || fileName.length() == 0) throw new IllegalArgumentException("The fileName argument is required");
        fileName = fileName.replace('*', '%');
        if (fileName.charAt(0) != '%') {
            fileName = "%" + fileName;
        }
        if (fileName.charAt(fileName.length() - 1) != '%') {
            fileName = fileName + "%";
        }
        EntityManager em = Media.entityManager();
        TypedQuery<Media> q = em.createQuery("SELECT o FROM Media AS o WHERE LOWER(o.fileName) LIKE LOWER(:fileName)", Media.class);
        q.setParameter("fileName", fileName);
        return q;
    }
    
    public static TypedQuery<Media> Media.findMediaByMimeTypeEquals(String mimeType) {
        if (mimeType == null || mimeType.length() == 0) throw new IllegalArgumentException("The mimeType argument is required");
        EntityManager em = Media.entityManager();
        TypedQuery<Media> q = em.createQuery("SELECT o FROM Media AS o WHERE o.mimeType = :mimeType", Media.class);
        q.setParameter("mimeType", mimeType);
        return q;
    }
    
    public static TypedQuery<Media> Media.findMediaByNameEquals(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        EntityManager em = Media.entityManager();
        TypedQuery<Media> q = em.createQuery("SELECT o FROM Media AS o WHERE o.name = :name", Media.class);
        q.setParameter("name", name);
        return q;
    }
    
    public static TypedQuery<Media> Media.findMediaByNameLike(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        name = name.replace('*', '%');
        if (name.charAt(0) != '%') {
            name = "%" + name;
        }
        if (name.charAt(name.length() - 1) != '%') {
            name = name + "%";
        }
        EntityManager em = Media.entityManager();
        TypedQuery<Media> q = em.createQuery("SELECT o FROM Media AS o WHERE LOWER(o.name) LIKE LOWER(:name)", Media.class);
        q.setParameter("name", name);
        return q;
    }
    
    public static TypedQuery<Media> Media.findMediaBySizeBetween(Long minSize, Long maxSize) {
        if (minSize == null) throw new IllegalArgumentException("The minSize argument is required");
        if (maxSize == null) throw new IllegalArgumentException("The maxSize argument is required");
        EntityManager em = Media.entityManager();
        TypedQuery<Media> q = em.createQuery("SELECT o FROM Media AS o WHERE o.size BETWEEN :minSize AND :maxSize", Media.class);
        q.setParameter("minSize", minSize);
        q.setParameter("maxSize", maxSize);
        return q;
    }
    
    public static TypedQuery<Media> Media.findMediaByUrlEquals(String url) {
        if (url == null || url.length() == 0) throw new IllegalArgumentException("The url argument is required");
        EntityManager em = Media.entityManager();
        TypedQuery<Media> q = em.createQuery("SELECT o FROM Media AS o WHERE o.url = :url", Media.class);
        q.setParameter("url", url);
        return q;
    }
    
    public static TypedQuery<Media> Media.findMediaByUrlLike(String url) {
        if (url == null || url.length() == 0) throw new IllegalArgumentException("The url argument is required");
        url = url.replace('*', '%');
        if (url.charAt(0) != '%') {
            url = "%" + url;
        }
        if (url.charAt(url.length() - 1) != '%') {
            url = url + "%";
        }
        EntityManager em = Media.entityManager();
        TypedQuery<Media> q = em.createQuery("SELECT o FROM Media AS o WHERE LOWER(o.url) LIKE LOWER(:url)", Media.class);
        q.setParameter("url", url);
        return q;
    }
    
}
